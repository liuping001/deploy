---
#https://stackoverflow.com/questions/41631770/get-dict-value-from-variable-key-in-ansible/41631874#41631874
#ansible-playbook -i inventory task.yml --tags="stop" -e "server_name=server2 deploy_vars_file=~/.deploy_var.yml"
- hosts: "{{server_name}}"
  gather_facts: no
  vars_files:
    - "{{deploy_vars_file}}"
  vars:
    # 定义一些默认变量
    default_start_file: '~/.bin/service.sh'
    exe_file: '{{vars[server_name].exe_file|default("")}}'
    exe_args: '{{vars[server_name].args|default("")}}'
    start: '{{vars[server_name].start_file|default(default_start_file)}} start {{exe_file}} {{exe_args}}'
    stop: '{{vars[server_name].start_file|default(default_start_file)}} stop {{exe_file}}'
    restart: '{{vars[server_name].start_file|default(default_start_file)}} restart {{exe_file}}'
    state: '{{vars[server_name].start_file|default(default_start_file)}} state {{exe_file}}'
    g_backup: '{{backup|default("no")}}'
  tasks:
    - name: "deploy system file"
      copy:
        src: '~/.bin/service.sh'
        dest: '~/.bin/service.sh'
        backup: no
        mode: "u+rwx,g-wx,o-wx"
      tags:
        - init
        - nover
    # push server files
    - name: "{{server_name}}: copy files"
      copy:
        src: '{{work_dir}}/{{item.src}}'
        dest: '{{dest_dir|default("")}}/{{item.dest}}'
        backup: '{{vars[server_name].backup|default(g_backup)}}'
        mode: preserve
      with_items:
        "{{vars[server_name].push|default({})}}"
      when: item.files is undefined and item.template is undefined
      tags:
        - push
        - nover

    - name: "{{server_name}}: copy choose files"
      copy:
        src: '{{work_dir}}/{{item.0.src}}/{{item.1}}'
        dest: '{{dest_dir|default("")}}/{{item.0.dest}}/'
        backup: '{{vars[server_name].backup|default(g_backup)}}'
        mode: preserve
      with_subelements:
        - "{{vars[server_name].push|default({})}}"
        - files
        - flags:
          skip_missing: true # https://www.codenong.com/24616107/
      tags:
        - push
        - nover

    # push server files
    - name: "{{server_name}}: template files"
      template:
        src: '{{work_dir}}/{{item.src}}'
        dest: '{{dest_dir|default("")}}/{{item.dest}}'
        backup: '{{vars[server_name].backup|default(g_backup)}}'
        mode: preserve
      with_items:
        "{{vars[server_name].push|default({})}}"
      when: item.template is defined  and item.template == 1
      tags:
        - push
        - nover
    # init cmd for server
    - name: "{{server_name}}: cmd"
      shell:
        cmd: '{{item}}'
        warn: False
      register: ret
      when: ret is undefined or ret.rc == 0
      with_items:
        '{{vars[server_name].cmd|default({})}}'
      tags:
        - cmd
        - nover

    ###############################################
    # for: remote build
    ###############################################

    - name: "{{server_name}}: fetch file"
      fetch:
        src: '{{dest_dir|default("")}}/{{item.src}}'
        dest: '{{work_dir}}/{{item.dest}}'
        backup: no
        remote_src: True
        mode: preserve
        flat: yes
      with_items:
        "{{vars[server_name].fetch|default({})}}"
      tags:
        - fetch
        - nover
#  synchronize -a "src=/tmp/client/ dest=/tmp/server mode=pull"
    - name: "{{server_name}}: sync push"
      synchronize:
        src: '{{work_dir}}/{{item.src}}'
        dest: '{{item.dest}}'
        mode: push
      with_items:
        "{{vars[server_name].sync|default({})}}"
      tags:
        - sync
        - nover
    ###############################################
    # shell: start stop restart status
    ###############################################
    # start server
    - name: "{{server_name}}: start"
      shell:
        cmd: 'cd {{dest_dir|default("")}} && {{vars[server_name].start|default(start)}}'
      tags:
        - start
        - nover

    # stop server
    - name: "{{server_name}}: stop"
      shell:
        cmd: 'cd {{dest_dir|default("")}} && {{vars[server_name].stop|default(stop)}}'
      tags:
        - stop
        - nover

    # restart server
    - name: "{{server_name}}: restart"
      shell:
        cmd: 'cd {{dest_dir|default("")}} && {{vars[server_name].restart|default(restart)}}'
      tags:
        - restart
        - nover

    # status server
    - name: "{{server_name}}: state"
      shell:
        cmd: 'cd {{dest_dir|default("")}} && {{vars[server_name].state|default(state)}}'
      register: ret
      failed_when: "ret.stderr != ''"
      ignore_errors: yes
      tags:
        - state
        - nover
    - name: "{{server_name}}: state print"
      debug:
        msg: "{{ret.stdout}}"
      tags:
        - state
        - nover
    ###############################################
    # crontab: install remove
    ###############################################
    - name: "{{server_name}}: install cron"
      cron:
        name: "{{item.name|default('*')}}"
        minute: "{{item.minute|default('*')}}"
        hour: "{{item.hour|default('*')}}"
        day: "{{item.day|default('*')}}"
        month: "{{item.month|default('*')}}"
        weekday: "{{item.weekday|default('*')}}"
        job: "{{item.job}}"
        state: present
      with_items:
        "{{vars[server_name].crontab|default({})}}"
      tags:
        - install
        - nover

    - name: "{{server_name}}: remove cron"
      cron:
        name: "{{item.name|default('*')}}"
        minute: "{{item.minute|default('*')}}"
        hour: "{{item.hour|default('*')}}"
        day: "{{item.day|default('*')}}"
        month: "{{item.month|default('*')}}"
        weekday: "{{item.weekday|default('*')}}"
        job: "{{item.job}}"
        state: absent
      with_items:
        "{{vars[server_name].crontab|default({})}}"
      tags:
        - remove
        - nover
