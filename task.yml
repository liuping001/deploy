---
#https://stackoverflow.com/questions/41631770/get-dict-value-from-variable-key-in-ansible/41631874#41631874
#ansible-playbook -i host.txt task.yml --tags="stop" -e "server_name=server2 server_define_file=server.yml"
- hosts: "{{server_name}}"
  gather_facts: no
  vars_files:
    - "{{server_define_file}}"
  tasks:
    # push server files
    - name: "push {{server_name}} copy file"
      copy:
        src: '{{work_dir}}/{{item.src}}'
        dest: '{{item.dest}}'
        backup: yes
        mode: preserve
      with_items:
        "{{deploy_info[server_name].copy_file|default({})}}"
      tags:
        - push

    - name: "push {{server_name}} copy file curt"
      copy:
        src: '{{work_dir}}/{{item.0.src}}/{{item.1}}'
        dest: '{{item.0.dest}}/'
        backup: yes
        mode: preserve
      with_subelements:
        - "{{deploy_info[server_name].copy_file_curt|default({})}}"
        - files
      tags:
        - push
        - push_curt

    # push server files
    - name: "push {{server_name}} template"
      template:
        src: '{{work_dir}}/{{item.src}}'
        dest: '{{item.dest}}'
        backup: yes
        mode: preserve
      with_items:
        "{{deploy_info[server_name].template|default({})}}"
      tags:
        - push

    # init cmd for server
    - name: "init {{server_name}}"
      shell:
        cmd: '{{item}}'
        warn: False
      with_items:
        '{{deploy_info[server_name].init_cmd|default({})}}'
      tags:
        - init
        - init_cmd

    ###############################################
    # supervisor: start stop restart status
    ###############################################
    # start server
    - name: "start {{server_name}}"
      supervisorctl:
        name: "{{server_name}}"
        state: started
        config: "{{deploy_info[server_name].supervisor_conf}}"
      when: deploy_info[server_name].start is undefined 
      tags:
        - start

    # stop server
    - name: "stop {{server_name}}"
      supervisorctl:
        name: "{{server_name}}"
        state: stopped
        config: "{{deploy_info[server_name].supervisor_conf}}"
      when: deploy_info[server_name].stop is undefined 
      tags:
        - stop


    # restart server
    - name: "restart {{server_name}}"
      supervisorctl:
        name: "{{server_name}}"
        state: restarted
        config: "{{deploy_info[server_name].supervisor_conf}}"
      when: deploy_info[server_name].restart is undefined 
      tags:
        - restart

    # status server
    - name: "status {{server_name}}"
      shell:
        cmd: 'supervisorctl -c {{deploy_info[server_name].supervisor_conf}} status {{server_name}}'
      register: ret
      failed_when: "ret.stderr != ''"
      when: deploy_info[server_name].status is undefined       
      tags:
        - status
    - name: "status {{server_name}} print"
      debug:
        var: ret.stdout
      when: deploy_info[server_name].status is undefined         
      tags:
        - status

    ###############################################
    # shell: start stop restart status
    ###############################################
    # start server
    - name: "start {{server_name}}"
      shell:
        cmd: '{{deploy_info[server_name].start}}'
      register: ret
      when: deploy_info[server_name].start is defined
      tags:
        - start
    - name: "start {{server_name}} print"
      debug: 
        msg:
         - "{{ret.stdout.split('\n')}}"
         - "{{ret.stderr.split('\n')}}"
      when: deploy_info[server_name].start is defined
      tags:
        - start

    # stop server
    - name: "stop {{server_name}}"
      shell:
        cmd: '{{deploy_info[server_name].stop}}'
      register: ret
      failed_when: "ret.stderr != ''"
      when: deploy_info[server_name].stop is defined
      tags:
        - stop
    - name: "stop {{server_name}} print"
      debug: 
        msg:
         - "{{ret.stdout.split('\n')}}"
         - "{{ret.stderr.split('\n')}}"
      when: deploy_info[server_name].stop is defined         
      tags:
        - stop

    # restart server
    - name: "restart {{server_name}}"
      shell:
        cmd: '{{deploy_info[server_name].restart}}'
      register: ret
      when: deploy_info[server_name].restart is defined        
      tags:
        - restart
    - name: "restart {{server_name}} print"
      debug: 
        msg:
         - "{{ret.stdout.split('\n')}}"
         - "{{ret.stderr.split('\n')}}"
      when: deploy_info[server_name].restart is defined
      tags:
        - restart

    # status server
    - name: "status {{server_name}}"
      shell:
        cmd: '{{deploy_info[server_name].status}}'
      register: ret
      failed_when: "ret.stderr != ''"
      when: deploy_info[server_name].status is defined
      tags:
        - status
    - name: "status {{server_name}} print"
      debug:
        msg:
         - "{{ret.stdout.split('\n')}}"
         - "{{ret.stderr.split('\n')}}"
      when: deploy_info[server_name].status is defined
      tags:
        - status

    - name: "install cron {{server_name}}"
      cron:
        name: "{{item.name|default('*')}}"
        minute: "{{item.minute|default('*')}}"
        hour: "{{item.hour|default('*')}}"
        day: "{{item.day|default('*')}}"
        month: "{{item.month|default('*')}}"
        weekday: "{{item.weekday|default('*')}}"
        job: "{{item.job}}"
        state: "{{item.state|regex_replace('remove', 'absent')|regex_replace('install', 'present')}}"
      with_items:
        "{{deploy_info[server_name].crontab|default({})}}"
      tags:
        - install

    - name: "remove cron {{server_name}}"
      cron:
        name: "{{item.name|default('*')}}"
        minute: "{{item.minute|default('*')}}"
        hour: "{{item.hour|default('*')}}"
        day: "{{item.day|default('*')}}"
        month: "{{item.month|default('*')}}"
        weekday: "{{item.weekday|default('*')}}"
        job: "{{item.job}}"
        state: absent
      with_items:
        "{{deploy_info[server_name].crontab|default({})}}"
      tags:
        - remove
